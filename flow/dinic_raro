// https://github.com/ADJA/algos/blob/master/Graphs/Dinic.cpp
// O(N * M * log(MC)), where MC is maximum edge capacity.
// importante, s debe ser 0 y t debe ser el nodo mas grande, no se muy bien como funciona xD
struct Dinic { 
    struct edge { 
        int a, b, f, c;
    };
    const int inf = 1000 * 1000 * 1000;
    int n, s, t, lim;
    vector <edge> e;
    vi pt; // very important performance trick
    vector<vi> g;
    long long flow = 0;
    queue <int> q;
    vi d;

    Dinic(int _n, int _s, int _t) {
        n = _n;
        s = _s;
        t = _t;
        pt.resize(n, 0);
        g.resize(n);
        d.resize(n, 0);
    }

    void add_edge(int a, int b, int c) {
        edge ed;

        //keep edges in vector: e[ind] - direct edge, e[ind ^ 1] - back edge

        ed.a = a; ed.b = b; ed.f = 0; ed.c = c;
        g[a].push_back(e.size());
        e.push_back(ed);

        ed.a = b; ed.b = a; ed.f = c; ed.c = c;
        g[b].push_back(e.size());
        e.push_back(ed);
    }

    bool bfs() {
        for (int i = s; i <= t; i++)
            d[i] = inf;
        d[s] = 0;
        q.push(s);
        while (!q.empty() && d[t] == inf) {
            int cur = q.front(); q.pop();
            for (size_t i = 0; i < g[cur].size(); i++) {
                int id = g[cur][i];
                int to = e[id].b;

                //printf("cur = %d id = %d a = %d b = %d f = %d c = %d\n", cur, id, e[id].a, e[id].b, e[id].f, e[id].c);

                if (d[to] == inf && e[id].c - e[id].f >= lim) {
                    d[to] = d[cur] + 1;
                    q.push(to);
                }
            }
        }
        while (!q.empty())
            q.pop();
        return d[t] != inf;
    }

    bool dfs(int v, int flw) {
        if (flw == 0)
            return false;
        if (v == t) {
            //cout << v << endl;
            return true;
        }
        for (; pt[v] < SZ(g[v]); pt[v]++) {
            int id = g[v][pt[v]];
            int to = e[id].b;

            //printf("v = %d id = %d a = %d b = %d f = %d c = %d\n", v, id, e[id].a, e[id].b, e[id].f, e[id].c);

            if (d[to] == d[v] + 1 && e[id].c - e[id].f >= flw) {
                int pushed = dfs(to, flw);
                if (pushed) {
                    e[id].f += flw;
                    e[id ^ 1].f -= flw;
                    return true;
                }
            }
        }
        return false;
    }

    ll dinic() {
        for (lim = (1 << 30); lim >= 1;) {
            if (!bfs()) {
                lim >>= 1;
                continue;
            }

            for (int i = s; i <= t; i++)
                pt[i] = 0;

            int pushed;

            while ((pushed = dfs(s, lim))) {
                flow = flow + lim;
            }

            //cout << flow << endl;
        }
        return flow;
    }
};
